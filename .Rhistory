# These are the hover texts with the reasons
hover_by_ab <- fbc %>%
dplyr::arrange(ARM, bucket, dplyr::desc(subject_count)) %>%
dplyr::group_by(ARM, bucket) %>%
dplyr::summarise(
hover = paste0(DSDECOD, ": ", subject_count, collapse = "<br>"),
.groups = "drop"
)
# This will combine the total bucket counts and the reasons (hover text) together
links_df <- totals_by_ab %>%
dplyr::left_join(
hover_by_ab,
by = c("ARM", "bucket")
)
# This is our template for what the flow will look like
arms    <- sort(unique(links_df$ARM))
buckets <- c("Not Started", "Stopped in Middle", "Completed")
nodes   <- c(arms, buckets)
# 0-based indices for plotly (for the nodes)
idx <- setNames(seq_along(nodes) - 1L, nodes)
# makes the ARM and bucket names from human readable to plotly readable (Indexed)
links_df <- linkes_df %>%
dplyr::mutate(
source = idx[ARM],
target = idx[bucket]
)
# make the colors for the nodes (by ARM)
arm_palette <- grDevices::rainbow(length(arms))
arm_colors <- setNames(arm_palette, arms)
links_df$link_color <- arm_colors[links_df$ARM]
# Give a neutral grey color to the nodes on the left
node_colors <- c(arm_colors, setNames(rep("#CCCCCC", length(buckets)), buckets))
node_color_vec <- unname(node_colors[nodes])
# Force the names of the nodes into the grey box
left_x <- rep(0.10, length(arms))
left_y <- seq(0.10, 0.90, length.out = length(arms))
right_x <- rep(0.85, length(buckets))
right_y <- c(0.80, 0.50, 0.20)
node_x <- c(left_x, right_x)
node_y <- c(left_y, right_y)
# Label the nodes
node_labels <- rep("", length(buckets)))
output$flow_sankey <- plotly::renderPlotly({
fbc <- flow_bucket_counts()
req(nrows(fbc) > 0)
# These are the totals for each bucket by ARM
totals_by_ab <- fbc %>%
dplyr::group_by(ARM, bucket) %>%
dplyr::summarise(
totals = sum(subject_count),
.groups = "drop"
)
# These are the hover texts with the reasons
hover_by_ab <- fbc %>%
dplyr::arrange(ARM, bucket, dplyr::desc(subject_count)) %>%
dplyr::group_by(ARM, bucket) %>%
dplyr::summarise(
hover = paste0(DSDECOD, ": ", subject_count, collapse = "<br>"),
.groups = "drop"
)
# This will combine the total bucket counts and the reasons (hover text) together
links_df <- totals_by_ab %>%
dplyr::left_join(
hover_by_ab,
by = c("ARM", "bucket")
)
# This is our template for what the flow will look like
arms    <- sort(unique(links_df$ARM))
buckets <- c("Not Started", "Stopped in Middle", "Completed")
nodes   <- c(arms, buckets)
# 0-based indices for plotly (for the nodes)
idx <- setNames(seq_along(nodes) - 1L, nodes)
# makes the ARM and bucket names from human readable to plotly readable (Indexed)
links_df <- linkes_df %>%
dplyr::mutate(
source = idx[ARM],
target = idx[bucket]
)
# make the colors for the nodes (by ARM)
arm_palette <- grDevices::rainbow(length(arms))
arm_colors <- setNames(arm_palette, arms)
links_df$link_color <- arm_colors[links_df$ARM]
# Give a neutral grey color to the nodes on the left
node_colors <- c(arm_colors, setNames(rep("#CCCCCC", length(buckets)), buckets))
node_color_vec <- unname(node_colors[nodes])
# Force the names of the nodes into the grey box
left_x <- rep(0.10, length(arms))
left_y <- seq(0.10, 0.90, length.out = length(arms))
right_x <- rep(0.85, length(buckets))
right_y <- c(0.80, 0.50, 0.20)
node_x <- c(left_x, right_x)
node_y <- c(left_y, right_y)
# Label the nodes
node_labels <- rep("", length(buckets))
# Build the flow chart
p <- plotly::plot_ly(
# The type of flow chart
type = "sankey",
arrangment = "fixed",
# Create the nodes
node = list(
label = node_labels,
color = node_color_vec,
pad = 18,
thickness = 18,
x = node_x,
y = node_y
),
# Create the links from arm to node
link = list(
source = links_df$source,
target = links_df$target,
value = links_df$value,
color = links_df$link_color,
label = paste0(
links_df$ARM, " -> ", links_df$bucket, "<br><br>",
"<b>Reasons</b><br>", links_df$hover
),
hovertemplate = "%{label}<extra></extra>"
)
) %>%
plotly::layout(
title = "Subject Disposition: ARM -> DS Event",
font = list(size = 14)
)
# Now add the labels because we want it in the box
node_annotes <- lapply(seq_along(nodes), function(i) {
list(
# So for each index (i) it will make the nodes
x = node_x[i], y = node_y[i],
xref = "paper", yref = "paper",
text = nodes[i],
showarrow = FALSE,
font = list(size = 12, color = "#222", family = "Helvetica"),
xanchor = "center", yanchor = "middle"
)
})
# ====== END OF FLOW CHART BACK-END ======
p <- plotly::layout(p, annotations = node_annotes)
p
})
shiny::runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
View(dm)
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
View(ds)
View(flow_bucket_counts)
ds_summary <- reactive({
usub_final_ds() %>%
dplyr::group_by(ARM, DSDECOD) %>%
dplyr::summarise(n_subjects = dplyr::n_distinct(USUBJID), .groups = "drop")
})
View(ds_summary())
View(ds_summary
)
ds_summary <-
+     usub_final_ds %>%
+         dplyr::group_by(ARM, DSDECOD) %>%
+         dplyr::summarise(n_subjects = dplyr::n_distinct(USUBJID), .groups = "drop")
ds_summary <- usub_final_ds %>%
dplyr::group_by(ARM, DSDECOD) %>%
dplyr::summarise(n_subjects = dplyr::n_distinct(USUBJID), .groups = "drop")
View(ds_summary)
View(flow_bucket_counts)
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
print(head(flow_chart_buckets()))
print(head(flow_chart_buckets)
print(head(flow_bucket_counts)
print(head(flow_chart_buckets))
print(head(flow_bucket_counts))
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
install.packages("ggmarkdown")
install.packages("ggtext")
library(ggtext)
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
View(cm)
libary(dprly)
install.packages("dplyr")
library(dplyr)
group_by(cm, CMTRT) %>%
nrows()
group_by(cm, CMTRT) %>%
nrow()
View(dm_arm)
View(cm)
View(dm)
# All the unique USUBJID's arms (no need for subject failure)
dm_arm <- reactive({
dm() %>%
dplyr::filter(!is.na(RFSTDTC)) %>%
dplyr::distinct(USUBJID, ARM, ARMCD, RFSTDTC, RFENDTC)
})
dm_arm <- dm %>%
dplyr::filter(!is.na(RFSTDTC)) %>%
dplyr::distinct(USUBJID, ARM, ARMCD, RFSTDTC, RFENDTC)
View(dm_arm)
cm_by_arm <-
cm %>%
dplyr::left_join(dm_arm, by = USUBJID)
cm_by_arm <-
cm %>%
dplyr::left_join(dm_arm, by = "USUBJID")
View(cm_by_arm)
# install.packages(c("ggplot2", "dplyr"))
library(ggplot2)
library(dplyr)
# ---- mock CM summary (replace with your real summary) ----
# One row per ARM Ã— CMCLAS with counts
cm_summary <- tribble(
~ARM,                 ~CMCLAS,        ~n,
"Placebo",            "Analgesics",    48,
"Placebo",            "Antibiotics",   22,
"Placebo",            "CNS Drugs",     30,
"Xano High Dose",     "Analgesics",    60,
"Xano High Dose",     "Antibiotics",   15,
"Xano High Dose",     "CNS Drugs",     25,
"Xano Low Dose",      "Analgesics",    35,
"Xano Low Dose",      "Antibiotics",   28,
"Xano Low Dose",      "CNS Drugs",     37
)
# % within each ARM (for labels)
cm_plotdat <- cm_summary %>%
group_by(ARM) %>%
mutate(
pct   = n / sum(n),
lbl   = paste0(round(100*pct, 1), "%")
) %>%
ungroup()
# --- Donut per ARM ---
ggplot(cm_plotdat, aes(x = 2, y = n, fill = CMCLAS)) +
geom_col(width = 1, color = "white") +
coord_polar(theta = "y", start = 0) +
# control donut hole size by x-limits; larger gap = bigger hole
xlim(0.5, 2.5) +
# centered percentage labels on wedges (optional)
geom_text(
aes(label = lbl),
position = position_stack(vjust = 0.5),
color = "white", size = 3.5
) +
facet_wrap(~ ARM, nrow = 1) +
labs(
title = "Concomitant Medication Classes by ARM",
fill  = "Medication Class"
) +
theme_void(base_size = 13) +
theme(
legend.position = "right",
strip.text = element_text(face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold")
)
View(cm_by_arm)
library(ggplot2)
library(dplyr)
library(plotly)
# Mock CM summary (replace with your own)
cm_summary <- tribble(
~ARM,              ~CMCLAS,        ~n,
"Placebo",         "Analgesics",    48,
"Placebo",         "Antibiotics",   22,
"Placebo",         "CNS Drugs",     30,
"Xano High Dose",  "Analgesics",    60,
"Xano High Dose",  "Antibiotics",   15,
"Xano High Dose",  "CNS Drugs",     25,
"Xano Low Dose",   "Analgesics",    35,
"Xano Low Dose",   "Antibiotics",   28,
"Xano Low Dose",   "CNS Drugs",     37
)
# Add percentages per ARM
cm_plotdat <- cm_summary %>%
group_by(ARM) %>%
mutate(pct = n / sum(n) * 100) %>%
ungroup()
# Donut chart in ggplot
p <- ggplot(cm_plotdat, aes(x = 2, y = n, fill = CMCLAS,
text = paste0(
"ARM: ", ARM, "<br>",
"Class: ", CMCLAS, "<br>",
"Count: ", n, "<br>",
"Percent: ", round(pct, 1), "%"
))) +
geom_col(width = 1, color = "white") +
coord_polar(theta = "y", start = 0) +
xlim(0.5, 2.5) +   # donut hole
facet_wrap(~ARM, nrow = 1) +
labs(title = "Concomitant Medication Classes by ARM",
fill = "Medication Class") +
theme_void(base_size = 13) +
theme(
legend.position = "right",
strip.text = element_text(face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold")
)
# Convert to interactive plotly (tooltips from `aes(text=...)`)
ggplotly(p, tooltip = "text")
library(ggplot2)
library(dplyr)
library(plotly)
# Mock CM summary (replace with your own)
cm_summary <- tribble(
~ARM,              ~CMCLAS,        ~n,
"Placebo",         "Analgesics",    48,
"Placebo",         "Antibiotics",   22,
"Placebo",         "CNS Drugs",     30,
"Xano High Dose",  "Analgesics",    60,
"Xano High Dose",  "Antibiotics",   15,
"Xano High Dose",  "CNS Drugs",     25,
"Xano Low Dose",   "Analgesics",    35,
"Xano Low Dose",   "Antibiotics",   28,
"Xano Low Dose",   "CNS Drugs",     37
)
# Add percentages per ARM
cm_plotdat <- cm_summary %>%
group_by(ARM) %>%
mutate(pct = n / sum(n) * 100) %>%
ungroup()
# Donut chart in ggplot
p <- ggplot(cm_plotdat, aes(x = 2, y = n, fill = CMCLAS,
text = paste0(
"ARM: ", ARM, "<br>",
"Class: ", CMCLAS, "<br>",
"Count: ", n, "<br>",
"Percent: ", round(pct, 1), "%"
))) +
geom_col(width = 1, color = "white") +
coord_polar(theta = "y", start = 0) +
xlim(0.5, 2.5) +   # donut hole
facet_wrap(~ARM, nrow = 1) +
labs(title = "Concomitant Medication Classes by ARM",
fill = "Medication Class") +
theme_void(base_size = 13) +
theme(
legend.position = "right",
strip.text = element_text(face = "bold"),
plot.title = element_text(hjust = 0.5, face = "bold")
)
# Convert to interactive plotly (tooltips from `aes(text=...)`)
ggplotly(p, tooltip = "text")
View(ds_summary)
View(cm_summary)
cm_donut_chart <-
cm_by_arm %>%
dplyr::group_by(ARM,CMTRT) %>%
dplyr::summarise(
n_subjects = n_distinct(USUBJID, na.rm = TRUE),
.groups = "drop"
)
View(cm_donut_chart)
arm_totals <- r
arm_totals <-
dm_arm %>%
dplyr::group_by(ARM) %>%
total_subjects = n_distinct(USUBJID, na.rm =TRUE),
arm_totals <-
dm_arm %>%
dplyr::group_by(ARM) %>%
total_subjects = n_distinct(USUBJID, na.rm =TRUE),
arm_totals <-
dm_arm %>%
dplyr::group_by(ARM) %>%
dplyr::summarise(
total_subjects = n_distinct(USUBJID, na.rm =TRUE),
.groups = "drop"
)
View(arm_totals)
arm_totals <-
dm_arm %>%
dplyr::group_by(ARM) %>%
dplyr::summarise(
total_subjects = n_distinct(USUBJID, na.rm =TRUE),
CMTRT = "not taken",
.groups = "drop"
)
View(arm_totals)
subjects_with_any_cm <-
cm_by_arm %>%
dplyr::group_by(ARM) %>%
dplyr::summarise(
subjects_with_cm = dplyr::n_distinct(USUBJID, na.rm = TRUE),
.groups = "drop"
)
View(subjects_with_any_cm)
not_taken_slice <-
arm_totals() %>%
dplyr::left_join(subjects_with_any_cm, by = "ARM") %>%
# This will calulate the new sums (replacing anything doesnt have cms with 0)
dplyr::mutate(
subjects_with_cm = tidyr::replace_na(subjects_with_cm, 0L),
n_subjects = pmax(total_subjects - subjects_with_cm, 0L),
CMTRT = "not taken"
) %>%
dplyr::select(ARM, CMTRT, n_subjects)
not_taken_slice <-
arm_totals %>%
dplyr::left_join(subjects_with_any_cm, by = "ARM") %>%
# This will calulate the new sums (replacing anything doesnt have cms with 0)
dplyr::mutate(
subjects_with_cm = tidyr::replace_na(subjects_with_cm, 0L),
n_subjects = pmax(total_subjects - subjects_with_cm, 0L),
CMTRT = "not taken"
) %>%
dplyr::select(ARM, CMTRT, n_subjects)
View(not_taken_slice)
cm_donut_chart <-
dplyr::bind_rows(
cm_slices,
not_taken_slice
)
cm_slices <-
cm_by_arm %>%
dplyr::group_by(ARM, CMTRT) %>%
dplyr::summarise(
n_subjects = n_distinct(USUBJID, na.rm = TRUE),
.groups = "drop"
)
cm_donut_chart <-
dplyr::bind_rows(
cm_slices,
not_taken_slice
)
View(cm_donut_chart)
cm_donut_chart <-
dplyr::bind_rows(
cm_slices,
not_taken_slice
)%>%
dplyr::arrange(CMTRT)
View(cm_donut_chart)
cm_donut_chart <-
dplyr::bind_rows(
cm_slices,
not_taken_slice
)%>%
dplyr::arrange(ARM, CMTRT)
install.packages("DT")
libary(DT)
library(DT)
shiny::runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
View(ds)
View(cm)
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
runApp('Documents/R_Shiny_Project/clinical-trial-r-shiny')
